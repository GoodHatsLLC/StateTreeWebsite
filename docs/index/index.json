{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/active\/info","title":"var info: StateTreeInfo","type":"property"},{"path":"\/documentation\/statetree\/tree\/active\/rootid","title":"var rootID: NodeID","type":"property"},{"path":"\/documentation\/statetree\/tree\/active\/rootnode","title":"var rootNode: N","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/active\/restore(state:)","title":"func restore(state: TreeStateRecord) throws","type":"method"},{"path":"\/documentation\/statetree\/tree\/active\/signal(intent:)","title":"func signal(intent: Intent) throws","type":"method"},{"path":"\/documentation\/statetree\/tree\/active\/snapshot()","title":"func snapshot() throws -> TreeStateRecord","type":"method"}],"path":"\/documentation\/statetree\/tree\/active","title":"Tree.Active","type":"struct"},{"path":"\/documentation\/statetree\/tree\/events","title":"Tree.Events","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/once-swift.struct\/behaviorsfinished()","title":"func behaviorsFinished() async -> [Behaviors.Result]","type":"method"},{"path":"\/documentation\/statetree\/tree\/once-swift.struct\/behaviorsstarted()","title":"func behaviorsStarted() async -> [BehaviorID]","type":"method"},{"path":"\/documentation\/statetree\/tree\/once-swift.struct\/result()","title":"func result() async -> Result<TreeStateRecord, TreeError>","type":"method"}],"path":"\/documentation\/statetree\/tree\/once-swift.struct","title":"Tree.Once","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/init(root:dependencies:interceptors:)","title":"convenience init(root: N, dependencies: DependencyValues, interceptors: [BehaviorInterceptor])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/assume","title":"var assume: Tree<N>.Active","type":"property"},{"path":"\/documentation\/statetree\/tree\/behaviortracker","title":"var behaviorTracker: BehaviorTracker","type":"property"},{"path":"\/documentation\/statetree\/tree\/id-8dbk","title":"let id: UUID","type":"property"},{"path":"\/documentation\/statetree\/tree\/isactive","title":"var isActive: Bool","type":"property"},{"path":"\/documentation\/statetree\/tree\/once-swift.property","title":"var once: Tree<N>.Once","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/active(_:)","title":"func active<T>((Tree<N>.Active) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/statetree\/tree\/start(from:)","title":"func start(from: TreeStateRecord?) throws -> TreeHandle<N>","type":"method"},{"path":"\/documentation\/statetree\/tree\/startifpossible()","title":"func startIfPossible()","type":"method"},{"path":"\/documentation\/statetree\/tree\/stop()","title":"func stop() throws -> Result<TreeStateRecord, TreeError>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/id-pqqm","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/statetree\/tree\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tree\/stopifactive()","title":"func stopIfActive()","type":"method"}],"path":"\/documentation\/statetree\/tree\/treetype-implementations","title":"TreeType Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/tree","title":"Tree","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/accessor\/wrappedvalue","title":"WrappedValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/accessor\/source","title":"var source: ProjectionSource","type":"property"},{"path":"\/documentation\/statetree\/accessor\/value","title":"var value: Self.WrappedValue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/accessor\/isvalid()","title":"func isValid() -> Bool","type":"method"}],"path":"\/documentation\/statetree\/accessor","title":"Accessor","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependencykey\/value-swift.associatedtype","title":"Value","type":"associatedtype"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependencykey\/defaultvalue","title":"static var defaultValue: Self.Value","type":"property"},{"path":"\/documentation\/statetree\/dependencykey\/value-swift.type.property","title":"static var value: Self.Value","type":"property"}],"path":"\/documentation\/statetree\/dependencykey","title":"DependencyKey","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/node\/noderules","title":"NodeRules","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/node\/rules","title":"var rules: Self.NodeRules","type":"property"}],"path":"\/documentation\/statetree\/node","title":"Node","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/routefieldtype\/router","title":"Router","type":"associatedtype"}],"path":"\/documentation\/statetree\/routefieldtype","title":"RouteFieldType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/routertype\/value","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routertype\/defaultrecord","title":"var defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/routertype\/fallback","title":"var fallback: Self.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/routertype\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/routertype\/update(from:)","title":"func update(from: Self)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routertype\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/routertype","title":"RouterType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/rules\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/rules\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/rules\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"},{"path":"\/documentation\/statetree\/rules\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/rules\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/rules\/updaterule(from:with:)","title":"func updateRule(from: Self, with: RuleContext) throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/rules\/none","title":"static var none: EmptyRule","type":"property"}],"path":"\/documentation\/statetree\/rules","title":"Rules","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/scopeaccess\/nodetype","title":"NodeType","type":"associatedtype"}],"path":"\/documentation\/statetree\/scopeaccess","title":"ScopeAccess","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/statetree\/scopetype\/n","title":"N","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/scopetype\/nid","title":"var nid: NodeID","type":"property"},{"path":"\/documentation\/statetree\/scopetype\/node","title":"var node: Self.N","type":"property"}],"path":"\/documentation\/statetree\/scopetype","title":"ScopeType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treetype\/behaviortracker","title":"var behaviorTracker: BehaviorTracker","type":"property"},{"path":"\/documentation\/statetree\/treetype\/id","title":"var id: UUID","type":"property"},{"path":"\/documentation\/statetree\/treetype\/isactive","title":"var isActive: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/treetype\/stop()","title":"func stop() throws -> Result<TreeStateRecord, TreeError>","type":"method"},{"path":"\/documentation\/statetree\/treetype\/stopifactive()","title":"func stopIfActive()","type":"method"}],"path":"\/documentation\/statetree\/treetype","title":"TreeType","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/uniontype\/~=(_:_:)","title":"static func ~= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/uniontype\/anypayload","title":"var anyPayload: Any","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/uniontype\/casematches(_:)","title":"func caseMatches(Self) -> Bool","type":"method"}],"path":"\/documentation\/statetree\/uniontype","title":"UnionType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependency\/init(_:)","title":"init(KeyPath<DependencyValues, Value>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependency\/wrappedvalue","title":"var wrappedValue: Value","type":"property"}],"path":"\/documentation\/statetree\/dependency","title":"Dependency","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependencyvalues\/inject(_:value:)","title":"func inject<Value>(WritableKeyPath<DependencyValues, Value>, value: Value) -> DependencyValues","type":"method"},{"path":"\/documentation\/statetree\/dependencyvalues\/injecting(_:value:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, value: Value) -> DependencyValues","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependencyvalues\/subscript(_:)","title":"subscript<Key>(Key.Type) -> Key.Value","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/dependencyvalues\/defaults","title":"static let defaults: DependencyValues","type":"property"}],"path":"\/documentation\/statetree\/dependencyvalues","title":"DependencyValues","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/emptyrule\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/emptyrule\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/emptyrule\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/emptyrule\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/emptyrule\/updaterule(from:with:)","title":"func updateRule(from: EmptyRule, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/emptyrule\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/emptyrule\/none","title":"static var none: EmptyRule","type":"property"}],"path":"\/documentation\/statetree\/emptyrule\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/emptyrule","title":"EmptyRule","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/errorrule\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/errorrule\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/errorrule\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/errorrule\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/errorrule\/updaterule(from:with:)","title":"func updateRule(from: ErrorRule, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/errorrule\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/errorrule\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/errorrule","title":"ErrorRule","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/fieldid\/init(_:)","title":"init?(String)","type":"init"},{"path":"\/documentation\/statetree\/fieldid\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/fieldid\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/fieldid\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/fieldid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/fieldid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/fieldid\/id-66ag","title":"var id: ObjectIdentifier","type":"property"},{"path":"\/documentation\/statetree\/fieldid\/id-992n8","title":"var id: String","type":"property"}],"path":"\/documentation\/statetree\/fieldid\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/fieldid","title":"FieldID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/inject\/init(_:_:into:)","title":"init<Value>(WritableKeyPath<DependencyValues, Value>, Value, into: () -> R)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/inject\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/inject\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/inject\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/inject\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/inject\/updaterule(from:with:)","title":"func updateRule(from: Inject<R>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/inject\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/inject\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/inject","title":"Inject","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/nodeids","title":"let nodeIDs: [NodeID]","type":"property"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/scopediscrepancy","title":"let scopeDiscrepancy: [NodeID]","type":"property"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/scopeids","title":"let scopeIDs: [NodeID]","type":"property"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/state","title":"let state: TreeStateRecord","type":"property"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/statediscrepancy","title":"let stateDiscrepancy: [NodeID]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/internalstateinconsistency\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/statetree\/internalstateinconsistency\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/internalstateinconsistency","title":"InternalStateInconsistency","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/lsid\/init(_:)-3hj62","title":"init?(String)","type":"init"},{"path":"\/documentation\/statetree\/lsid\/init(_:)-7chx7","title":"init?(String?)","type":"init"},{"path":"\/documentation\/statetree\/lsid\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/statetree\/lsid\/init(prefix:hashable:)","title":"init(prefix: String, hashable: some Hashable)","type":"init"},{"path":"\/documentation\/statetree\/lsid\/init(prefix:id:)","title":"init(prefix: String, id: some Decodable & Encodable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/lsid\/description","title":"let description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/lsid\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/lsid\/from(_:)","title":"static func from(some Identifiable) -> LSID","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/lsid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/lsid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/lsid","title":"LSID","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/lifecycleresult\/+(_:_:)","title":"static func + (LifecycleResult, LifecycleResult) -> LifecycleResult","type":"op"}],"path":"\/documentation\/statetree\/lifecycleresult","title":"LifecycleResult","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/listrouter\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/listrouter\/fallback","title":"var fallback: [Element]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/listrouter\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/listrouter\/update(from:)","title":"func update(from: ListRouter<Element>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/listrouter\/value","title":"ListRouter.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/listrouter\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/listrouter","title":"ListRouter","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/mayberule\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/mayberule\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/mayberule\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/mayberule\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/mayberule\/updaterule(from:with:)","title":"func updateRule(from: MaybeRule<R>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/mayberule\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/mayberule\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/mayberule","title":"MaybeRule","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybesinglerouter\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/maybesinglerouter\/fallback","title":"var fallback: NodeType?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybesinglerouter\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/maybesinglerouter\/update(from:)","title":"func update(from: MaybeSingleRouter<NodeType>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybesinglerouter\/value","title":"MaybeSingleRouter.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybesinglerouter\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/maybesinglerouter","title":"MaybeSingleRouter","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion2router\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/maybeunion2router\/fallback","title":"var fallback: MaybeUnion2Router<A, B>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion2router\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/maybeunion2router\/update(from:)","title":"func update(from: MaybeUnion2Router<A, B>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion2router\/value","title":"MaybeUnion2Router.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion2router\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/maybeunion2router","title":"MaybeUnion2Router","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion3router\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/maybeunion3router\/fallback","title":"var fallback: MaybeUnion3Router<A, B, C>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion3router\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/maybeunion3router\/update(from:)","title":"func update(from: MaybeUnion3Router<A, B, C>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion3router\/value","title":"MaybeUnion3Router.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/maybeunion3router\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/maybeunion3router","title":"MaybeUnion3Router","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/_(_:_:)-60xuf","title":"static func < (NodeID, NodeID) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/init()","title":"init()","type":"init"},{"path":"\/documentation\/statetree\/nodeid\/init(_:)","title":"init?(String)","type":"init"},{"path":"\/documentation\/statetree\/nodeid\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/'...(_:)-2qprq","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/'...(_:)-7sdn0","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/_(_:_:)-134ez","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/_=(_:_:)-1uwb7","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/statetree\/nodeid\/_=(_:_:)-2kmjr","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/nodeid\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeid\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/nodeid\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/nodeid","title":"NodeID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onchange\/init(_:_:runbehavior:handler:)","title":"init(Value, BehaviorID?, runBehavior: B, handler: B.Handler?)","type":"init"},{"path":"\/documentation\/statetree\/onchange\/init(modulefile:line:column:_:_:action:)-89wvm","title":"init(moduleFile: String, line: Int, column: Int, Value, BehaviorID?, action: (Value, Value) async -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onchange\/init(modulefile:line:column:_:_:action:)-qi4j","title":"init(moduleFile: String, line: Int, column: Int, Value, BehaviorID?, action: (Value, Value) -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onchange\/init(modulefile:line:column:_:_:maker:onvalue:onfinish:onfailure:)","title":"init<Seq>(moduleFile: String, line: Int, column: Int, Value, BehaviorID?, maker: (Value, Value) async -> Seq, onValue: (Seq.Element) -> Void, onFinish: () -> Void, onFailure: (Error) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onchange\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onchange\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onchange\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onchange\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onchange\/updaterule(from:with:)","title":"func updateRule(from: OnChange<Value, B>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onchange\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onchange\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onchange","title":"OnChange","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onintent\/init(_:handler:)","title":"init<Step>(Step.Type, handler: (Step) -> IntentAction)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onintent\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onintent\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onintent\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onintent\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onintent\/updaterule(from:with:)","title":"func updateRule(from: OnIntent, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onintent\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onintent\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onintent","title":"OnIntent","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onreceive\/init(modulefile:line:column:_:_:onvalue:onfinish:onfailure:)","title":"init<Seq>(moduleFile: String, line: Int, column: Int, Seq, BehaviorID?, onValue: (Value) -> Void, onFinish: () -> Void, onFailure: (Error) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onreceive\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onreceive\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onreceive\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onreceive\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onreceive\/updaterule(from:with:)","title":"func updateRule(from: OnReceive<Value>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onreceive\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onreceive\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onreceive","title":"OnReceive","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstart\/init(_:_:runbehavior:handler:)","title":"init(B.Input, BehaviorID?, runBehavior: B, handler: B.Handler?)","type":"init"},{"path":"\/documentation\/statetree\/onstart\/init(modulefile:line:column:_:_:)-3g25m","title":"init(moduleFile: String, line: Int, column: Int, BehaviorID?, () -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onstart\/init(modulefile:line:column:_:_:)-9xurh","title":"init(moduleFile: String, line: Int, column: Int, BehaviorID?, () async -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onstart\/init(modulefile:line:column:_:maker:onvalue:onfinish:onfailure:)","title":"init<Seq>(moduleFile: String, line: Int, column: Int, BehaviorID?, maker: () async -> Seq, onValue: (Seq.Element) -> Void, onFinish: () -> Void, onFailure: (Error) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstart\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onstart\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstart\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstart\/synctostate(with:)-9t126","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstart\/synctostate(with:)-wwwc","title":"func syncToState(with: RuleContext)","type":"method"},{"path":"\/documentation\/statetree\/onstart\/updaterule(from:with:)","title":"func updateRule(from: OnStart<B>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstart\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onstart\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onstart","title":"OnStart","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstop\/init(_:runbehavior:handler:)","title":"init(BehaviorID?, runBehavior: B, handler: B.Handler?)","type":"init"},{"path":"\/documentation\/statetree\/onstop\/init(modulefile:line:column:_:_:)","title":"init(moduleFile: String, line: Int, column: Int, BehaviorID?, () -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstop\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onstop\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstop\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstop\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onstop\/updaterule(from:with:)","title":"func updateRule(from: OnStop<B>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onstop\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onstop\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onstop","title":"OnStop","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/onupdate\/init(_:_:runbehavior:handler:)","title":"init(B.Input, BehaviorID?, runBehavior: B, handler: B.Handler?)","type":"init"},{"path":"\/documentation\/statetree\/onupdate\/init(modulefile:line:column:_:_:action:)-3j4ec","title":"init<Input>(moduleFile: String, line: Int, column: Int, Input, BehaviorID?, action: (Input) -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onupdate\/init(modulefile:line:column:_:_:action:)-4hcnl","title":"init<Input>(moduleFile: String, line: Int, column: Int, Input, BehaviorID?, action: (Input) async -> Void)","type":"init"},{"path":"\/documentation\/statetree\/onupdate\/init(modulefile:line:column:_:_:run:onvalue:onfinish:onfailure:)","title":"init<Input, Seq>(moduleFile: String, line: Int, column: Int, Input, BehaviorID?, run: (Input) async -> Seq, onValue: (Seq.Element) -> Void, onFinish: () -> Void, onFailure: (Error) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onupdate\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/onupdate\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onupdate\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onupdate\/synctostate(with:)-22shg","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/onupdate\/synctostate(with:)-65mnd","title":"func syncToState(with: RuleContext)","type":"method"},{"path":"\/documentation\/statetree\/onupdate\/updaterule(from:with:)","title":"func updateRule(from: OnUpdate<B>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/onupdate\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/onupdate\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/onupdate","title":"OnUpdate","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/init(_:initial:)","title":"init(some Accessor<Value>, initial: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/projectedvalue","title":"var projectedValue: Projection<Value>","type":"property"},{"path":"\/documentation\/statetree\/projection\/source","title":"var source: ProjectionSource","type":"property"},{"path":"\/documentation\/statetree\/projection\/value","title":"var value: Value","type":"property"},{"path":"\/documentation\/statetree\/projection\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/compact()","title":"func compact<Downstream>() -> Projection<Downstream>?","type":"method"},{"path":"\/documentation\/statetree\/projection\/compactmap(downwards:upwards:)","title":"func compactMap<Downstream>(downwards: (Value) -> Downstream?, upwards: (Downstream) -> Value) -> Projection<Downstream>?","type":"method"},{"path":"\/documentation\/statetree\/projection\/isvalid()","title":"func isValid() -> Bool","type":"method"},{"path":"\/documentation\/statetree\/projection\/map(_:isvalid:)","title":"func map<Downstream>(WritableKeyPath<Value, Downstream>, isValid: (Value) -> Bool) -> Projection<Downstream>","type":"method"},{"path":"\/documentation\/statetree\/projection\/replacenil(default:)","title":"func replaceNil<Downstream>(default: Downstream) -> Projection<Downstream>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/subscript(dynamicmember:)-4r8nc","title":"subscript<Downstream>(dynamicMember _: WritableKeyPath<Value, Downstream>) -> Projection<Downstream>","type":"subscript"},{"path":"\/documentation\/statetree\/projection\/subscript(dynamicmember:)-64xb7","title":"subscript<Downstream>(dynamicMember _: WritableKeyPath<Value, Downstream>) -> Projection<Downstream>?","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/captured(getter:setter:)","title":"static func captured<V>(getter: () -> V, setter: (V) -> Void) -> Projection<V>","type":"method"},{"path":"\/documentation\/statetree\/projection\/constant(_:)","title":"static func constant<V>(V) -> Projection<V>","type":"method"},{"path":"\/documentation\/statetree\/projection\/stored(_:)","title":"static func stored<V>(V) -> Projection<V>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/formindex(before:)","title":"func formIndex(before: inout Projection<Value>.Index)","type":"method"},{"path":"\/documentation\/statetree\/projection\/index(before:)","title":"func index(before: Projection<Value>.Index) -> Projection<Value>.Index","type":"method"}],"path":"\/documentation\/statetree\/projection\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/endindex","title":"var endIndex: Projection<Value>.Index","type":"property"},{"path":"\/documentation\/statetree\/projection\/indices-swift.property","title":"var indices: Value.Indices","type":"property"},{"path":"\/documentation\/statetree\/projection\/startindex","title":"var startIndex: Projection<Value>.Index","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/index(after:)","title":"func index(after: Value.Index) -> Value.Index","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/subscript(_:)","title":"subscript(Projection<Value>.Index) -> Projection<Value.Element>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/index","title":"Projection.Index","type":"typealias"},{"path":"\/documentation\/statetree\/projection\/indices-swift.typealias","title":"Projection.Indices","type":"typealias"},{"path":"\/documentation\/statetree\/projection\/subsequence","title":"Projection.SubSequence","type":"typealias"}],"path":"\/documentation\/statetree\/projection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/id-22zv7","title":"var id: Value.ID","type":"property"},{"path":"\/documentation\/statetree\/projection\/id-6v2jh","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/statetree\/projection\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/projection\/element","title":"Projection.Element","type":"typealias"},{"path":"\/documentation\/statetree\/projection\/iterator","title":"Projection.Iterator","type":"typealias"}],"path":"\/documentation\/statetree\/projection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/projection","title":"Projection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-23ksn","title":"init<A, B, C>(wrappedValue: () -> Union.Three<A, B, C>?)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-2a1uj","title":"init<NodeType>(wrappedValue: () -> NodeType)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-4c17u","title":"init<A, B>(wrappedValue: () -> Union.Two<A, B>)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-59wrp","title":"init<NodeType>(wrappedValue: NodeType?)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-78d4q","title":"init<NodeType>(wrappedValue: [NodeType])","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-8525x","title":"init<A, B, C>(wrappedValue: () -> Union.Three<A, B, C>)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:)-9s40s","title":"init<A, B>(wrappedValue: () -> Union.Two<A, B>?)","type":"init"},{"path":"\/documentation\/statetree\/route\/init(wrappedvalue:line:col:)","title":"init<NodeType>(wrappedValue: [NodeType], line: Int, col: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/route\/projectedvalue","title":"var projectedValue: Route<Router>","type":"property"},{"path":"\/documentation\/statetree\/route\/wrappedvalue","title":"var wrappedValue: Router.Value","type":"property"}],"path":"\/documentation\/statetree\/route","title":"Route","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routeid\/init(fieldid:identity:)","title":"init(fieldID: FieldID, identity: LSID?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routeid\/fieldid","title":"let fieldID: FieldID","type":"property"},{"path":"\/documentation\/statetree\/routeid\/identity","title":"let identity: LSID?","type":"property"}],"path":"\/documentation\/statetree\/routeid","title":"RouteID","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routesource\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routesource\/depth","title":"let depth: Int","type":"property"},{"path":"\/documentation\/statetree\/routesource\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/routesource\/fieldid","title":"let fieldID: FieldID","type":"property"},{"path":"\/documentation\/statetree\/routesource\/identity","title":"let identity: LSID?","type":"property"},{"path":"\/documentation\/statetree\/routesource\/nodeid","title":"var nodeID: NodeID","type":"property"},{"path":"\/documentation\/statetree\/routesource\/routeid","title":"var routeID: RouteID","type":"property"},{"path":"\/documentation\/statetree\/routesource\/type","title":"let type: RouteType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routesource\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routesource\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routesource","title":"RouteSource","type":"struct"},{"path":"\/documentation\/statetree\/routerrulecontext","title":"RouterRuleContext","type":"struct"},{"path":"\/documentation\/statetree\/rulecontext","title":"RuleContext","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/ruleset\/init(rules:)","title":"init(rules: () -> R)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/ruleset\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/ruleset\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/ruleset\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/ruleset\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/ruleset\/updaterule(from:with:)","title":"func updateRule(from: RuleSet<R>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/ruleset\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/ruleset\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/ruleset","title":"RuleSet","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/runtimeconfiguration\/init(behaviortracker:)","title":"init(behaviorTracker: BehaviorTracker)","type":"init"}],"path":"\/documentation\/statetree\/runtimeconfiguration","title":"RuntimeConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/scope\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/scope\/id","title":"var id: NodeID?","type":"property"},{"path":"\/documentation\/statetree\/scope\/isactive","title":"var isActive: Bool","type":"property"},{"path":"\/documentation\/statetree\/scope\/projectedvalue","title":"var projectedValue: Scope","type":"property"},{"path":"\/documentation\/statetree\/scope\/wrappedvalue","title":"var wrappedValue: Scope","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/scope\/action(_:modulefile:line:column:action:onsuccess:)-66yd8","title":"func action<Output>(BehaviorID?, moduleFile: String, line: Int, column: Int, action: () async -> Output, onSuccess: (Output) -> Void)","type":"method"},{"path":"\/documentation\/statetree\/scope\/action(_:modulefile:line:column:action:onsuccess:)-6jqof","title":"func action<Output>(BehaviorID?, moduleFile: String, line: Int, column: Int, action: () -> Output, onSuccess: (Output) -> Void)","type":"method"},{"path":"\/documentation\/statetree\/scope\/action(_:modulefile:line:column:action:onsuccess:onfailure:)-6s0ba","title":"func action<Output>(BehaviorID?, moduleFile: String, line: Int, column: Int, action: Behaviors.Run<Output>.SyncFunc.Throwing, onSuccess: (Output) -> Void, onFailure: (Error) -> Void)","type":"method"},{"path":"\/documentation\/statetree\/scope\/action(_:modulefile:line:column:action:onsuccess:onfailure:)-8k5ey","title":"func action<Output>(BehaviorID?, moduleFile: String, line: Int, column: Int, action: () async throws -> Output, onSuccess: (Output) -> Void, onFailure: (Error) -> Void)","type":"method"},{"path":"\/documentation\/statetree\/scope\/behavior(_:_:input:handler:)","title":"func behavior<B>(BehaviorID?, B, input: B.Input, handler: B.Handler?)","type":"method"},{"path":"\/documentation\/statetree\/scope\/run(_:modulefile:line:column:action:)","title":"func run(BehaviorID?, moduleFile: String, line: Int, column: Int, action: () async throws -> Void)","type":"method"},{"path":"\/documentation\/statetree\/scope\/transaction(_:)","title":"func transaction<T>(() throws -> T) rethrows -> T?","type":"method"}],"path":"\/documentation\/statetree\/scope","title":"Scope","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-115xm","title":"init<A, B, C>(Union.Three<A, B, C>, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-1e2ju","title":"init<A, B, C>(Union.Three<A, B, C>?, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-2ryyi","title":"init<NodeType>([NodeType], at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-48fgz","title":"init<A, B>(Union.Two<A, B>, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-53xh8","title":"init<Value>(Value?, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-8rhsh","title":"init<Value>(Value, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(_:at:)-ir8b","title":"init<A, B>(Union.Two<A, B>?, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(data:at:builder:)-1h2ge","title":"init<Data, NodeType>(data: Data, at: Route<Router>, builder: (Data.Element) -> NodeType)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(data:at:builder:)-8wzw3","title":"init<Data, NodeType>(data: Data, at: Route<Router>, builder: (Data.Element) -> NodeType)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(data:identifiedby:at:)","title":"init<Data>(data: Data, identifiedBy: KeyPath<Data.Element, some Hashable>, at: Route<Router>)","type":"init"},{"path":"\/documentation\/statetree\/serve\/init(nodes:at:line:col:)","title":"init<NodeType>(nodes: [NodeType], at: Route<Router>, line: Int, col: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/serve\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/serve\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/serve\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/serve\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/serve\/updaterule(from:with:)","title":"func updateRule(from: Serve<Router>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/serve\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/serve\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/serve","title":"Serve","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/singlerouter\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/singlerouter\/fallback","title":"var fallback: NodeType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/singlerouter\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/singlerouter\/update(from:)","title":"func update(from: SingleRouter<NodeType>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/singlerouter\/value","title":"SingleRouter.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/singlerouter\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/singlerouter","title":"SingleRouter","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/statetreeinfo\/behaviors","title":"var behaviors: [Behaviors.Resolution]","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/height","title":"var height: Int","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/isactive","title":"var isActive: Bool","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/isconsistent","title":"var isConsistent: Bool","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/nodecount","title":"var nodeCount: Int","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/nodeids","title":"var nodeIDs: [NodeID]","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/pendingintent","title":"var pendingIntent: Intent?","type":"property"},{"path":"\/documentation\/statetree\/statetreeinfo\/rootid","title":"var rootID: NodeID?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/statetreeinfo\/flushupdatestats()","title":"func flushUpdateStats() -> UpdateStats","type":"method"}],"path":"\/documentation\/statetree\/statetreeinfo","title":"StateTreeInfo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeerror\/init(_:)","title":"init(some Error)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/treeerror\/errordescription","title":"var errorDescription: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/treeerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/statetree\/treeerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/treeerror","title":"TreeError","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/isdisposed","title":"var isDisposed: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/auto()","title":"func auto() -> AutoDisposable","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/dispose()","title":"func dispose()","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/erased()","title":"func erased() -> ErasedDisposable","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/stage(on:)","title":"func stage(on: DisposableStage)","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/stagebyidentity(token:)","title":"func stageByIdentity(token: StaticString)","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/stagebyuniquecallsite(fileid:line:column:)","title":"func stageByUniqueCallSite(fileID: String, line: Int, column: Int)","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stophandle\/stageindefinitely()","title":"func stageIndefinitely()","type":"method"}],"path":"\/documentation\/statetree\/treehandle\/stophandle\/disposable-implementations","title":"Disposable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/treehandle\/stophandle","title":"TreeHandle.StopHandle","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treehandle\/node","title":"var node: NodeType","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/treehandle\/autostop()","title":"func autostop() -> TreeHandle<NodeType>.StopHandle","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/onfinish()","title":"func onFinish() async -> Result<TreeStateRecord, TreeError>","type":"method"},{"path":"\/documentation\/statetree\/treehandle\/stop()","title":"func stop() throws -> Result<TreeStateRecord, TreeError>","type":"method"}],"path":"\/documentation\/statetree\/treehandle","title":"TreeHandle","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/treestaterecord\/init()","title":"init()","type":"init"},{"path":"\/documentation\/statetree\/treestaterecord\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/statetree\/treestaterecord\/init(jsonstring:)","title":"init(jsonString: String) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treestaterecord\/formattedjson","title":"var formattedJSON: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/treestaterecord\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/treestaterecord\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/treestaterecord\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/treestaterecord","title":"TreeStateRecord","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tuplerule\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/tuplerule\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/tuplerule\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/tuplerule\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/tuplerule\/updaterule(from:with:)","title":"func updateRule(from: TupleRule<M1, M2>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/tuplerule\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/tuplerule\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/tuplerule","title":"TupleRule","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union2router\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/union2router\/fallback","title":"var fallback: Union2Router<A, B>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/union2router\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/union2router\/update(from:)","title":"func update(from: Union2Router<A, B>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/union2router\/value","title":"Union2Router.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union2router\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/union2router","title":"Union2Router","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union3router\/defaultrecord","title":"let defaultRecord: RouteRecord","type":"property"},{"path":"\/documentation\/statetree\/union3router\/fallback","title":"var fallback: Union3Router<A, B, C>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/union3router\/assign(_:)","title":"func assign(RouterRuleContext)","type":"method"},{"path":"\/documentation\/statetree\/union3router\/update(from:)","title":"func update(from: Union3Router<A, B, C>)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/union3router\/value","title":"Union3Router.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union3router\/type","title":"static var type: RouteType","type":"property"}],"path":"\/documentation\/statetree\/union3router","title":"Union3Router","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct\/allnodeevents","title":"var allNodeEvents: Int","type":"property"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct\/nodestarts","title":"var nodeStarts: Int","type":"property"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct\/nodestops","title":"var nodeStops: Int","type":"property"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct\/nodeupdates","title":"var nodeUpdates: Int","type":"property"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct\/uniquetouchednodes","title":"var uniqueTouchedNodes: Int","type":"property"}],"path":"\/documentation\/statetree\/updatestats\/counts-swift.struct","title":"UpdateStats.Counts","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/updatestats\/durations-swift.struct\/nodeupdates","title":"var nodeUpdates: TimeInterval","type":"property"}],"path":"\/documentation\/statetree\/updatestats\/durations-swift.struct","title":"UpdateStats.Durations","type":"struct"},{"path":"\/documentation\/statetree\/updatestats\/updatetimer","title":"UpdateStats.UpdateTimer","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/updatestats\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/updatestats\/counts-swift.property","title":"var counts: UpdateStats.Counts","type":"property"},{"path":"\/documentation\/statetree\/updatestats\/durations-swift.property","title":"var durations: UpdateStats.Durations","type":"property"}],"path":"\/documentation\/statetree\/updatestats","title":"UpdateStats","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/value\/init(wrappedvalue:)","title":"init(wrappedValue: WrappedValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/value\/projectedvalue","title":"var projectedValue: Projection<WrappedValue>","type":"property"},{"path":"\/documentation\/statetree\/value\/source","title":"var source: ProjectionSource","type":"property"},{"path":"\/documentation\/statetree\/value\/value","title":"var value: WrappedValue","type":"property"},{"path":"\/documentation\/statetree\/value\/wrappedvalue-swift.property","title":"var wrappedValue: WrappedValue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/value\/isvalid()","title":"func isValid() -> Bool","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/value\/wrappedvalue-swift.typealias","title":"Value.WrappedValue","type":"typealias"}],"path":"\/documentation\/statetree\/value","title":"Value","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/statetree\/treestate","title":"TreeState","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/eitherrule\/rulea(_:)","title":"case ruleA(RA)","type":"case"},{"path":"\/documentation\/statetree\/eitherrule\/ruleb(_:)","title":"case ruleB(RB)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/eitherrule\/act(for:with:)","title":"func act(for: RuleLifecycle, with: RuleContext) -> LifecycleResult","type":"method"},{"path":"\/documentation\/statetree\/eitherrule\/applyrule(with:)","title":"func applyRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/eitherrule\/removerule(with:)","title":"func removeRule(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/eitherrule\/synctostate(with:)","title":"func syncToState(with: RuleContext) throws","type":"method"},{"path":"\/documentation\/statetree\/eitherrule\/updaterule(from:with:)","title":"func updateRule(from: EitherRule<RA, RB>, with: RuleContext) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/eitherrule\/injecting(_:_:)","title":"func injecting<Value>(WritableKeyPath<DependencyValues, Value>, Value) -> Inject<some Rules>\n","type":"method"}],"path":"\/documentation\/statetree\/eitherrule\/rules-implementations","title":"Rules Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/eitherrule","title":"EitherRule","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeevent\/start(id:depth:)","title":"case start(id: NodeID, depth: Int?)","type":"case"},{"path":"\/documentation\/statetree\/nodeevent\/stop(id:depth:)","title":"case stop(id: NodeID, depth: Int?)","type":"case"},{"path":"\/documentation\/statetree\/nodeevent\/update(id:depth:)","title":"case update(id: NodeID, depth: Int)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeevent\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/nodeevent\/depthorder","title":"var depthOrder: Int","type":"property"},{"path":"\/documentation\/statetree\/nodeevent\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/nodeevent\/nodeid","title":"var nodeID: NodeID","type":"property"}],"path":"\/documentation\/statetree\/nodeevent","title":"NodeEvent","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/projectionsource\/invalid","title":"case invalid","type":"case"},{"path":"\/documentation\/statetree\/projectionsource\/programmatic","title":"case programmatic","type":"case"},{"path":"\/documentation\/statetree\/projectionsource\/valuefield(_:)","title":"case valueField(FieldID)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/projectionsource\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/projectionsource\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/projectionsource\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/projectionsource","title":"ProjectionSource","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/recordingevent\/started(recorderid:)","title":"case started(recorderID: UUID)","type":"case"},{"path":"\/documentation\/statetree\/recordingevent\/stopped(recorderid:)","title":"case stopped(recorderID: UUID)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/recordingevent\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/recordingevent\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/statetree\/recordingevent","title":"RecordingEvent","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/list\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/list\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routerecord\/list\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routerecord\/list","title":"RouteRecord.List","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/list(_:)","title":"case list(RouteRecord.List)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/maybesingle(_:)","title":"case maybeSingle(NodeID?)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/maybeunion2(_:)","title":"case maybeUnion2(RouteRecord.Union2?)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/maybeunion3(_:)","title":"case maybeUnion3(RouteRecord.Union3?)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/single(_:)","title":"case single(NodeID)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/union2(_:)","title":"case union2(RouteRecord.Union2)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/union3(_:)","title":"case union3(RouteRecord.Union3)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/ids","title":"var ids: [NodeID]","type":"property"},{"path":"\/documentation\/statetree\/routerecord\/type","title":"var type: RouteType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union2\/a(_:)","title":"case a(NodeID)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/union2\/b(_:)","title":"case b(NodeID)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union2\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union2\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routerecord\/union2\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routerecord\/union2","title":"RouteRecord.Union2","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union3\/a(_:)","title":"case a(NodeID)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/union3\/b(_:)","title":"case b(NodeID)","type":"case"},{"path":"\/documentation\/statetree\/routerecord\/union3\/c(_:)","title":"case c(NodeID)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union3\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/union3\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routerecord\/union3\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routerecord\/union3","title":"RouteRecord.Union3","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routerecord\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routerecord\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routerecord","title":"RouteRecord","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/list","title":"case list","type":"case"},{"path":"\/documentation\/statetree\/routetype\/maybesingle","title":"case maybeSingle","type":"case"},{"path":"\/documentation\/statetree\/routetype\/maybeunion2","title":"case maybeUnion2","type":"case"},{"path":"\/documentation\/statetree\/routetype\/maybeunion3","title":"case maybeUnion3","type":"case"},{"path":"\/documentation\/statetree\/routetype\/single","title":"case single","type":"case"},{"path":"\/documentation\/statetree\/routetype\/union2","title":"case union2","type":"case"},{"path":"\/documentation\/statetree\/routetype\/union3","title":"case union3","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/routetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/routetype\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/statetree\/routetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/statetree\/routetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/routetype","title":"RouteType","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/rulebuilder\/buildblock(_:)","title":"static func buildBlock<R>(R) -> R","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildeither(first:)","title":"static func buildEither<RA, RB>(first: RA) -> EitherRule<RA, RB>","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildeither(second:)","title":"static func buildEither<RA, RB>(second: RB) -> EitherRule<RA, RB>","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildexpression(_:)-1fw9f","title":"static func buildExpression<R>(R?) -> some Rules","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildexpression(_:)-2u6k4","title":"static func buildExpression(()) -> EmptyRule","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildexpression(_:)-7og66","title":"static func buildExpression<R>(() throws -> R) -> some Rules","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildexpression(_:)-9ni0y","title":"static func buildExpression<R>(R) -> R","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildoptional(_:)","title":"static func buildOptional((some Rules)?) -> some Rules","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildpartialblock(accumulated:next:)","title":"static func buildPartialBlock(accumulated: some Rules, next: some Rules) -> some Rules","type":"method"},{"path":"\/documentation\/statetree\/rulebuilder\/buildpartialblock(first:)","title":"static func buildPartialBlock<R>(first: R) -> R","type":"method"}],"path":"\/documentation\/statetree\/rulebuilder","title":"RuleBuilder","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/rulelifecycle\/didstart","title":"case didStart","type":"case"},{"path":"\/documentation\/statetree\/rulelifecycle\/didupdate","title":"case didUpdate","type":"case"},{"path":"\/documentation\/statetree\/rulelifecycle\/handleintent(_:)","title":"case handleIntent(Intent)","type":"case"},{"path":"\/documentation\/statetree\/rulelifecycle\/willstop","title":"case willStop","type":"case"}],"path":"\/documentation\/statetree\/rulelifecycle","title":"RuleLifecycle","type":"enum"},{"path":"\/documentation\/statetree\/transform","title":"Transform","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeevent\/behavior(event:)","title":"case behavior(event: BehaviorEvent)","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/node(event:)","title":"case node(event: NodeEvent)","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/recording(event:)","title":"case recording(event: RecordingEvent)","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/tree(event:)","title":"case tree(event: TreeLifecycleEvent)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeevent\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeevent\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/treeevent\/maybebehavior","title":"var maybeBehavior: BehaviorEvent?","type":"property"},{"path":"\/documentation\/statetree\/treeevent\/maybenode","title":"var maybeNode: NodeEvent?","type":"property"},{"path":"\/documentation\/statetree\/treeevent\/mayberecording","title":"var maybeRecording: RecordingEvent?","type":"property"},{"path":"\/documentation\/statetree\/treeevent\/maybetree","title":"var maybeTree: TreeLifecycleEvent?","type":"property"},{"path":"\/documentation\/statetree\/treeevent\/type","title":"var type: TreeEvent.EventType","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeevent\/eventtype\/behavior","title":"case behavior","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/eventtype\/node","title":"case node","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/eventtype\/recording","title":"case recording","type":"case"},{"path":"\/documentation\/statetree\/treeevent\/eventtype\/tree","title":"case tree","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/treeevent\/eventtype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/treeevent\/eventtype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/treeevent\/eventtype","title":"TreeEvent.EventType","type":"enum"}],"path":"\/documentation\/statetree\/treeevent","title":"TreeEvent","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/treelifecycleevent\/started(treeid:)","title":"case started(treeID: UUID)","type":"case"},{"path":"\/documentation\/statetree\/treelifecycleevent\/stopped(treeid:)","title":"case stopped(treeID: UUID)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/treelifecycleevent\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/treelifecycleevent\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/statetree\/treelifecycleevent\/treeid","title":"var treeID: UUID","type":"property"}],"path":"\/documentation\/statetree\/treelifecycleevent","title":"TreeLifecycleEvent","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/three\/a(_:)","title":"case a(A)","type":"case"},{"path":"\/documentation\/statetree\/union\/three\/b(_:)","title":"case b(B)","type":"case"},{"path":"\/documentation\/statetree\/union\/three\/c(_:)","title":"case c(C)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/three\/a","title":"var a: A?","type":"property"},{"path":"\/documentation\/statetree\/union\/three\/anypayload","title":"var anyPayload: Any","type":"property"},{"path":"\/documentation\/statetree\/union\/three\/b","title":"var b: B?","type":"property"},{"path":"\/documentation\/statetree\/union\/three\/c","title":"var c: C?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/three\/casematches(_:)","title":"func caseMatches(Union.Three<A, B, C>) -> Bool","type":"method"},{"path":"\/documentation\/statetree\/union\/three\/map(a:b:c:)","title":"func map<NewA, NewB, NewC>(a: (A) -> NewA, b: (B) -> NewB, c: (C) -> NewC) -> Union.Three<NewA, NewB, NewC>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/three\/~=(_:_:)","title":"static func ~= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/union\/three\/uniontype-implementations","title":"UnionType Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/union\/three","title":"Union.Three","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/two\/a(_:)","title":"case a(A)","type":"case"},{"path":"\/documentation\/statetree\/union\/two\/b(_:)","title":"case b(B)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/two\/a","title":"var a: A?","type":"property"},{"path":"\/documentation\/statetree\/union\/two\/anypayload","title":"var anyPayload: Any","type":"property"},{"path":"\/documentation\/statetree\/union\/two\/b","title":"var b: B?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/two\/casematches(_:)","title":"func caseMatches(Union.Two<A, B>) -> Bool","type":"method"},{"path":"\/documentation\/statetree\/union\/two\/map(a:b:)","title":"func map<NewA, NewB>(a: (A) -> NewA, b: (B) -> NewB) -> Union.Two<NewA, NewB>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/union\/two\/~=(_:_:)","title":"static func ~= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/union\/two\/uniontype-implementations","title":"UnionType Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/union\/two","title":"Union.Two","type":"enum"}],"path":"\/documentation\/statetree\/union","title":"Union","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/extractionerror\/description","title":"let description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/extractionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/statetree\/valuepayload\/extractionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/valuepayload\/extractionerror","title":"ValuePayload.ExtractionError","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/stringdecodingerror\/description","title":"let description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/stringdecodingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/statetree\/valuepayload\/stringdecodingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/valuepayload\/stringdecodingerror","title":"ValuePayload.StringDecodingError","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/stringencodingerror\/description","title":"let description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/stringencodingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/statetree\/valuepayload\/stringencodingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/valuepayload\/stringencodingerror","title":"ValuePayload.StringEncodingError","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/==(_:_:)","title":"static func == (ValuePayload, ValuePayload) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/decoded(stringpayload:)","title":"case decoded(stringPayload: String)","type":"case"},{"path":"\/documentation\/statetree\/valuepayload\/runtime(known:stringpayload:)","title":"case runtime(known: TreeState, stringPayload: String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/init(_:)","title":"init(some Decodable & Encodable & Hashable) throws","type":"init"},{"path":"\/documentation\/statetree\/valuepayload\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/embed(value:)","title":"func embed<T>(value: T) throws","type":"method"},{"path":"\/documentation\/statetree\/valuepayload\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/statetree\/valuepayload\/extract(as:)","title":"func extract<T>(as: T.Type) throws -> T","type":"method"},{"path":"\/documentation\/statetree\/valuepayload\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/statetree\/valuepayload\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/statetree\/valuepayload\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/statetree\/valuepayload","title":"ValuePayload","type":"enum"}],"path":"\/documentation\/statetree","title":"StateTree","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}